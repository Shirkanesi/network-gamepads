Basic parameters
	The length of a token or password MUST NOT exceed 64 bytes
	The length of a single message MUST NOT exceed 512 bytes
	Every message MUST BE terminated by a zero byte
	The protocol version described in this document is "2.0"
	Server responses will always be preceded by a 3-byte status code

== Initial connection ==

After establishing the initial TCP connection to the server, the client
initiates a HELLO request of the form

	HELLO <protocol_version>\n
	VENDOR <vendor_id>\n
	PRODUCT <product_id>\n
	VERSION <device_version>\n
	BUSTYPE <bustype>\n
	DEVTYPE <devtype>\n
	NAME <short_name>\n
	PASSWORD <password>\n\n

with <protocol_version> representing the protocol version implemented by the client,
<vendor_id> representing the vendor_id of the device,
<product_id> representing the product_id of the device,
<device_version> representing the version of the device,
<bustype> representing the bustype of the device,
<devtype> representing the device type (see device types),
<short_name> representing a short_name of the device
(not more then 100 characters)
and <password> representing a pre-configured shared password to the server.

An example is in example.txt
A missing device type line will result in the unkown device type.

Upon successful authentication, the server replies with

	200 <token>

with <token> being a reconnection passphrase to be used when re-establishing
a lost connection. The token will guarantee that a client is always assigned the
same input device on the server.

After receiving the 200 message, the client is put into pass-through mode and
may begin sending `struct input_event` binary data.

Upon failure, the server may respond with any of

	400 Version not matched (Server: <server>, Client: <client>)
	401 Wrong password
	405 No Password supplied

and terminate the connection.

== Reconnecting a client ==
Upon losing the connection to a server, a client may reconnect and be assigned
the same input device again by presenting the reconnection token transmitted in
response to the initial HELLO request. To do so, the client opens a TCP
connection and transmits

	CONTINUE <version> <token>

with <version> being the client protocol version and <token> the reconnection
token.

Upon successful reconnection, the server answers with

	200 <token>

where <token> again represents a token to be used in further CONTINUE requests.
The client is then again put in pass-through mode.

Upon failure, the server may respond with any of the failure codes mentioned
in the previous section, as well as

	406 No Token supplied
	403 Token expired

== Device types ==
0: UNKOWN - Unkown device type
1: MICE - a mice
2: GAMEPAD - a gamepad device
3: KEYBOARD - a keyboard

